---
- name: Common setup for all servers
  hosts: master
  become: true
  tasks:
    - name: Create resolved.conf.d directory if not exists
      file:
        path: /etc/systemd/resolved.conf.d
        state: directory

    - name: Create dns_servers.conf file if not exists
      file:
        path: /etc/systemd/resolved.conf.d/dns_servers.conf
        state: touch

    - name: Set DNS servers in resolved.conf
      blockinfile:
        path: /etc/systemd/resolved.conf.d/dns_servers.conf
        block: |
          [Resolve]
          DNS=${DNS_SERVERS}

    - name: Restart systemd-resolved
      systemd:
        name: systemd-resolved
        state: restarted

    - name: Disable swap
      command: swapoff -a

    - name: Persist swap-off across reboot
      cron:
        name: Disable Swap
        job: "/sbin/swapoff -a"
        user: root
        cron_file: swapoff_a
        state: present

    - name: Update package lists
      apt:
        update_cache: yes

    - name: Determine Kubernetes version
      set_fact:
        kubernetes_version_raw: "{{ software.kubernetes  }}"

    - name: Extract major.minor version
      set_fact:
        kubernetes_version: "{{ kubernetes_version_raw | regex_search('[0-9]+\\.[0-9]+') }}"
    
    - name: Debug var
      debug:
        msg: "Value is: {{ kubernetes_version }}"


    - name: Create crio.conf file if not exists
      file:
        path: /etc/modules-load.d/crio.conf
        state: touch

    - name: Create .conf file for modules-load.d
      blockinfile:
        path: /etc/modules-load.d/crio.conf
        block: |
          overlay
          br_netfilter

    - name: Load kernel modules
      command: "{{ item }}"
      loop:
        - modprobe overlay
        - modprobe br_netfilter


    - name: Create 99-kubernetes-cri.conf file if not exists
      file:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        state: touch

    - name: Set up sysctl parameters
      blockinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: Apply sysctl settings
      command: sysctl --system

    - name: Ensure directory exists
      file:
        path: "/etc/apt/sources.list.d/"
        state: directory

    - name: Ensure file exists (create if not)
      file:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
        state: touch

    - name: Add CRI-O repository to sources.list
      blockinfile:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
        block: |
          deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ software.os }}/ /
      tags: 
        - crio_installation

    - name: Ensure file exists (create if not)
      file:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ kubernetes_version }}.list"
        state: touch

    - name: Add CRI-O repository for specific version to sources.list
      blockinfile:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ kubernetes_version }}.list"
        block: |
          deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ kubernetes_version }}/{{ software.os }}/ /
      tags: 
        - crio_installation

    - name: Add GPG key for CRI-O repository
      shell: "curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ kubernetes_version }}/{{ software.os }}/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -"
      tags: 
        - crio_installation

    - name: Add GPG key for CRI-O repository (fallback)
      shell: "curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ software.os }}/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -"
      tags: 
        - crio_installation

    - name: Update package lists
      apt:
        update_cache: yes
      tags: 
        - crio_installation

    - name: Install CRI-O and CRI-O runc
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - cri-o
        - cri-o-runc
      tags: 
        - crio_installation

    - name: Configure CRI-O environment variables
      blockinfile:
        path: "/etc/default/crio"
        block: "{{ environment }}"
      tags: 
        - crio_installation

    - name: Reload systemd daemon
      systemd:
        name: crio
        state: reloaded
      tags: 
        - crio_installation

    - name: Enable and start CRI-O service
      systemd:
        name: crio
        enabled: yes
        state: started
      tags: 
        - crio_installation

    - name: Print success message
      debug:
        msg: "CRI-O runtime installed successfully"
      tags: 
        - crio_installation

    - name: Update package lists
      apt:
        update_cache: yes

    - name: Install prerequisites
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - jq

    - name: Import GPG key for Kubernetes
      shell: "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -"


    - name: Ensure file /etc/apt/sources.list.d/kubernetes.list exists (create if not)
      file:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        state: touch

    - name: Add Kubernetes repository to sources.list
      blockinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        block: |
          deb https://apt.kubernetes.io/ kubernetes-xenial main

    - name: Update package lists again
      apt:
        update_cache: yes

    # - name: Install Kubernetes components
    #   apt:
    #     name: "{{ item }}"
    #     state: present
    #   loop:
    #     - kubelet={{ kubernetes_version }}
    #     - kubectl={{ kubernetes_version }}
    #     - kubeadm={{ kubernetes_version }}

    - name: Install Kubernetes components
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - kubelet
        - kubectl
        - kubeadm

    - name: Get local IP
      command: "ip --json a s"
      register: ip_result

    # - name: Extract local IP using jq
    #   set_fact:
    #     local_ip: "{{ ip_result.stdout | from_json | json_query('[] | select(.ifname == \"eth1\") | .addr_info[] | select(.family == \"inet\") | .local') }}"

    - name: Configure kubelet
      blockinfile:
        path: /etc/default/kubelet
        block: |
          KUBELET_EXTRA_ARGS=--node-ip={{ ansible_host }}
          {{ environment }}
        create: yes
