---
- name: Common setup for all servers
  hosts: all
  become: true
  tasks:
    - name: Create resolved.conf.d directory if not exists
      file:
        path: /etc/systemd/resolved.conf.d
        state: directory

    - name: Create dns_servers.conf file if not exists
      file:
        path: /etc/systemd/resolved.conf.d/dns_servers.conf
        state: touch

    - name: Set DNS servers in resolved.conf
      blockinfile:
        path: /etc/systemd/resolved.conf.d/dns_servers.conf
        block: |
          [Resolve]
          DNS=${DNS_SERVERS}

    - name: Restart systemd-resolved
      systemd:
        name: systemd-resolved
        state: restarted

    - name: Disable swap
      command: swapoff -a

    - name: Persist swap-off across reboot
      cron:
        name: Disable Swap
        job: "/sbin/swapoff -a"
        user: root
        cron_file: swapoff_a
        state: present

    - name: Update package lists
      apt:
        update_cache: yes

    - name: Determine Kubernetes version
      set_fact:
        kubernetes_version_raw: "{{ software.kubernetes  }}"

    - name: Extract major.minor version
      set_fact:
        kubernetes_version: "{{ kubernetes_version_raw | regex_search('[0-9]+\\.[0-9]+') }}"
    
    - name: Debug var
      debug:
        msg: "Value is: {{ kubernetes_version }}"


    - name: Create crio.conf file if not exists
      file:
        path: /etc/modules-load.d/crio.conf
        state: touch

    - name: Create .conf file for modules-load.d
      blockinfile:
        path: /etc/modules-load.d/crio.conf
        block: |
          overlay
          br_netfilter

    - name: Load kernel modules
      command: "{{ item }}"
      loop:
        - modprobe overlay
        - modprobe br_netfilter


    - name: Create 99-kubernetes-cri.conf file if not exists
      file:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        state: touch

    - name: Set up sysctl parameters
      blockinfile:
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: Apply sysctl settings
      command: sysctl --system

    - name: Ensure directory exists
      file:
        path: "/etc/apt/sources.list.d/"
        state: directory

    - name: Ensure file exists (create if not)
      file:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
        state: touch

    - name: Add CRI-O repository to sources.list
      blockinfile:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
        block: |
          deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ software.os }}/ /
      tags: 
        - crio_installation

    - name: Ensure file exists (create if not)
      file:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ kubernetes_version }}.list"
        state: touch

    - name: Add CRI-O repository for specific version to sources.list
      blockinfile:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ kubernetes_version }}.list"
        block: |
          deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ kubernetes_version }}/{{ software.os }}/ /
      tags: 
        - crio_installation

    - name: Add GPG key for CRI-O repository
      shell: "curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ kubernetes_version }}/{{ software.os }}/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -"
      tags: 
        - crio_installation

    - name: Add GPG key for CRI-O repository (fallback)
      shell: "curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ software.os }}/Release.key | sudo apt-key --keyring /etc/apt/trusted.gpg.d/libcontainers.gpg add -"
      tags: 
        - crio_installation

    - name: Update package lists
      apt:
        update_cache: yes
      tags: 
        - crio_installation

    - name: Install CRI-O and CRI-O runc
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - cri-o
        - cri-o-runc
      tags: 
        - crio_installation

    - name: Configure CRI-O environment variables
      blockinfile:
        path: "/etc/default/crio"
        block: "{{ environment }}"
      tags: 
        - crio_installation

    - name: Reload systemd daemon
      systemd:
        name: crio
        state: reloaded
      tags: 
        - crio_installation

    - name: Enable and start CRI-O service
      systemd:
        name: crio
        enabled: yes
        state: started
      tags: 
        - crio_installation

    - name: Print success message
      debug:
        msg: "CRI-O runtime installed successfully"
      tags: 
        - crio_installation

    - name: Update package lists
      apt:
        update_cache: yes

    - name: Install prerequisites
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - jq

    - name: Import GPG key for Kubernetes
      shell: "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -"


    - name: Ensure file /etc/apt/sources.list.d/kubernetes.list exists (create if not)
      file:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        state: touch

    - name: Add Kubernetes repository to sources.list
      blockinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        block: |
          deb https://apt.kubernetes.io/ kubernetes-xenial main

    - name: Update package lists again
      apt:
        update_cache: yes

    # - name: Install Kubernetes components
    #   apt:
    #     name: "{{ item }}"
    #     state: present
    #   loop:
    #     - kubelet={{ kubernetes_version }}
    #     - kubectl={{ kubernetes_version }}
    #     - kubeadm={{ kubernetes_version }}

    - name: Install Kubernetes components
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - kubelet
        - kubectl
        - kubeadm

    - name: Get local IP
      command: "ip --json a s"
      register: ip_result

    # - name: Extract local IP using jq
    #   set_fact:
    #     local_ip: "{{ ip_result.stdout | from_json | json_query('[] | select(.ifname == \"eth1\") | .addr_info[] | select(.family == \"inet\") | .local') }}"

    - name: Configure kubelet
      blockinfile:
        path: /etc/default/kubelet
        block: |
          KUBELET_EXTRA_ARGS=--node-ip={{ ansible_host }}
          {{ environment }}
        create: yes


- name: Installation steps for master
  hosts: master
  become: true
  vars:
    config_path: "/vagrant/configs"
  tasks:
    - name: Pull Kubernetes images
      command: kubeadm config images pull
      become_user: root

    - name: Run kubeadm reset with ignore-preflight-errors and automatic "yes"
      command: sh -c 'yes | sudo kubeadm reset --ignore-preflight-errors=all'
      ignore_errors: yes
      become_user: root

    - name: Run kubeadm init
      command: >
        kubeadm init
        --apiserver-advertise-address={{ network.control_ip }}
        --apiserver-cert-extra-sans={{ network.control_ip }}
        --pod-network-cidr={{ network.pod_cidr }}
        --service-cidr={{ network.service_cidr }}
        --node-name "{{ inventory_hostname }}"
        --ignore-preflight-errors Swap
      become_user: root

    - name: Create .kube directory
      file:
        path: "{{ lookup('env', 'HOME') }}/.kube"
        state: directory

    - name: Copy admin.conf to user's .kube directory
      command: >
        sudo cp -f /etc/kubernetes/admin.conf "{{ lookup('env', 'HOME') }}/.kube/config"
      become_user: "{{ lookup('env', 'USER') }}"

    - name: Set ownership of .kube/config
      command: >
        sudo chown "{{ lookup('env', 'USER') }}":"{{ lookup('env', 'USER') }}" "{{ lookup('env', 'HOME') }}/.kube/config"

    # - name: Ensure configs directory exists or clean it up
    #   file:
    #     path: "{{ config_path }}"
    #     state: directory
    #     recurse: yes
    #   register: config_dir

    - name: Copy admin.conf to configs directory
      command: "cp -f /etc/kubernetes/admin.conf {{ config_path }}/config"
      # when: config_dir.results[0].stat.exists 
      become_user: root

    - name: Create join.sh script
      command: "touch {{ config_path }}/join.sh && chmod +x {{ config_path }}/join.sh"
      # become_user: root


    - name: Generate kubeadm join command and save to join.sh
      shell:
        cmd: "kubeadm token create --print-join-command > {{ config_path }}/join.sh"
      args:
        executable: /bin/bash

    - name: Download Calico manifest
      get_url:
        url: "https://raw.githubusercontent.com/projectcalico/calico/v{{ software.calico }}/manifests/calico.yaml"
        dest: "{{ config_path }}/calico.yaml"
      tags: 
        - calico

    # - name: Check Kubernetes API server status
    #   shell: kubectl cluster-info
    #   register: cluster_info
    #   until: "'Kubernetes control plane is running' in cluster_info.stdout"
    #   retries: 6
    #   delay: 10
    #   become_user: vagrant

    # - name: Check Kubernetes API server status
    #   command: kubectl cluster-info
    #   register: cluster_info
    #   until: "cluster_info.stdout | grep -q 'Kubernetes control plane is running'"
    #   retries: 6
    #   delay: 10
    #   become_user: vagrant

    # - name: Check Kubernetes API server status
    #   command: kubectl cluster-info
    #   register: cluster_info
    #   changed_when: "'Kubernetes control plane is running' in cluster_info.stdout"
    #   retries: 6
    #   delay: 10

    # - name: Sleep for 15 seconds
    #   pause:
    #     seconds: 15

    - name: Apply Calico Network Plugin
      command: "kubectl apply -f {{ config_path }}/calico.yaml"
      become_user: vagrant
      tags: 
        - calico

    - name: Add Cilium Helm repository
      command: "helm repo add cilium https://helm.cilium.io/"
      become_user: vagrant
      tags: 
        - cilium
      
    - name: Install Cilium with Helm
      command: "helm install cilium cilium/cilium --version 1.15.0 --namespace kube-system"
      become_user: vagrant
      tags: 
        - cilium

    - name: Download Calico tigera operator manifest
      get_url:
        url: "https://raw.githubusercontent.com/projectcalico/calico/{{ software.calico_vpp }}/manifests/tigera-operator.yaml"
        dest: "{{ config_path }}/calico-vpp-tigera-operator.yaml"
      tags: 
        - calico_vpp

    - name: Delete Calico tigera operator to delete residual from old calico
      command: "kubectl delete -f {{ config_path }}/calico-vpp-tigera-operator.yaml"
      become_user: vagrant
      tags: 
        - calico_vpp
      ignore_errors: yes

    - name: Create/Replace Calico tigera operator
      command: "kubectl create -f {{ config_path }}/calico-vpp-tigera-operator.yaml"
      become_user: vagrant
      tags: 
        - calico_vpp
      # ignore_errors: yes


    # - name: Download Calico tigera operator manifest
    #   get_url:
    #     url: "https://raw.githubusercontent.com/projectcalico/vpp-dataplane/{{ software.calico_vpp_dataplane }}/yaml/calico/installation-default.yaml"
    #     dest: "{{ config_path }}/calico-vpp-data-plane.yaml"
    #   tags: 
    #     - calico_vpp

    # - name: Create/Replace Calico VPP dataplane
    #   command: "kubectl create -f {{ config_path }}/calico-vpp-data-plane.yaml"
    #   become_user: vagrant
    #   tags: 
    #     - calico_vpp
    #   # ignore_errors: yes

    - name: Create/Replace Calico Network Plugin
      command: "kubectl create -f {{ config_path }}/calico-vpp.yaml"
      become_user: vagrant
      tags: 
        - calico_vpp

    # - name: Upgrade Cilium Helm release with identityTracking configuration
    #   command: helm upgrade cilium cilium/cilium --reuse-values --set global.identityTracking="k8s"
    #   become_user: vagrant

    - name: Configure Kubernetes for vagrant user
      command: "sudo -i -u vagrant bash -c 'whoami && mkdir -p /home/vagrant/.kube && cp {{ config_path }}/config /home/vagrant/.kube/ && chown 1000:1000 /home/vagrant/.kube/config'"
      become_user: vagrant

- name: Installation steps for worker
  hosts: workers
  become: true
  vars:
    config_path: "/vagrant/configs"
  tasks:
  - name: Run kubeadm reset with ignore-preflight-errors and automatic "yes"
    command: sh -c 'yes | sudo kubeadm reset --ignore-preflight-errors=all'
    ignore_errors: yes

  - name: Execute join.sh script
    command: "/bin/bash {{ config_path }}/join.sh -v"

  - name: Configure Kubernetes for vagrant user
    become: yes
    become_user: vagrant
    command: >
      sh -c 'whoami &&
              mkdir -p /home/vagrant/.kube &&
              sudo cp {{ config_path }}/config /home/vagrant/.kube/ &&
              sudo chown 1000:1000 /home/vagrant/.kube/config &&
              NODENAME=$(hostname -s) &&
              kubectl label node $NODENAME node-role.kubernetes.io/worker=worker'
